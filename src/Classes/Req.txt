N1

(60 min)


1p - starting the exam


(1p) Create Java project(s) in Eclipse/IntelliJ and classes for managing houses expenses for utilities (such as: water, common parts electricity, garbage, administration of the houses buildings, etc.)

Show constructors, get/set methods and highlight "has a" and "is a" relationship, also use interfaces and exceptions handling.


(1p) Build a TCP server for receiving 2 text files with houses expenses per month in multi-threading manner.


(1p) Build a TCP client for sending the 2 text files for the houses expenses managed by admin company. The text files have the following structure:

# comments of file 1

# id_house, location, admin_company, water_in_consumption (m3), water_out_consumption (m3), recycled_waste_garbage_weight (kg), waste_garbage_weight (kg), shared_electricity (kwh)

22, IF - Pantelimon, eBlocAdmin, 11, 7, 20, 8, 25

23, IF - Pantelimon, eBlocAdmin, 31, 12, 28, 14, 25


# comments of file 2 - unit prices (up) in RON

# up_water_in, up_water_out, up_recycled_waste, up_waste, up_shared_electricity

4.7, 3.9, 1.2, 3.5, 0.98



--- Points dynamically requested by the teacher:

(1p) JCF - Java Collection Framework - e.g. the TCP server after receiving the text file is parsing them and create a list of houses and sort them descending, without functional programming, according with their total monthly expenses in RON


(1p) Functional programming - Lambda, Functional Interfaces, Functional Processing Streams


(2p) JDBC - SQLite (e.g. insert only certain houses in some SQL table and display them)


(2p) Advanced topics applied into the solution - e.g. Transform the multi-threading in Future-Callable with Executor-Service approach, Replace the multi-threading with reactive streams, Use GUI Java FXML to inject into DB data, ...






#######################################################################

N2

(60 min)


1p - starting the exam


(1p) Create Java project(s) in Eclipse/IntelliJ and classes for managing company expenses for cars (such as: gas, maintenance, parking, insurance, etc.)

Please implement constructors, get/set methods and highlight "has a" and "is a" relationship, also use interfaces and exceptions handling.


(1p) Build a TCP server for receiving text files with cars expenses per month in multi-threading manner.


(1p) Build a TCP client for sending the 2 binary files for the cars expenses managed by the company. The file contains client serialized objects (the list) with at least following details:

id_car, registration_plate, insurance_company, distance (km), gas_consumption (L), gas_cost (RON), insurance_cost (RON), parking_cost (RON)

* the file is created by some Java code before in a diffrent class with main method entry point



--- Points dynamically requested by the teacher:

(1p) JCF - Java Collection Framework - e.g. the TCP server after receiving the serialized objects file is deserializing them and create a list of cars and sort them descending, without functional programming, according with their total monthly expenses in RON or the cost per km or ...


(1p) Functional programming - Lambda, Functional Interfaces, Functional Processing Streams


(2p) JDBC - SQLite (e.g. insert only certain cars or data in some SQL table and display them)


(2p) Advanced topics applied into the solution - e.g. Transform the multi-threading in Future-Callable with Executor-Service approach, Replace the multi-threading with reactive streams, Use GUI Java FXML to inject into DB data, ...


